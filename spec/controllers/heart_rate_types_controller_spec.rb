require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HeartRateTypesController do

  # This should return the minimal set of attributes required to create a valid
  # HeartRateType. As you add validations to HeartRateType, be sure to
  # update the return value of this method accordingly.
  # def valid_attributes
  #   {}
  # end

  # describe "GET index" do
  #   it "assigns all heart_rate_types as @heart_rate_types" do
  #     heart_rate_type = HeartRateType.create! valid_attributes
  #     get :index
  #     assigns(:heart_rate_types).should eq([heart_rate_type])
  #   end
  # end

  # describe "GET show" do
  #   it "assigns the requested heart_rate_type as @heart_rate_type" do
  #     heart_rate_type = HeartRateType.create! valid_attributes
  #     get :show, :id => heart_rate_type.id.to_s
  #     assigns(:heart_rate_type).should eq(heart_rate_type)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new heart_rate_type as @heart_rate_type" do
  #     get :new
  #     assigns(:heart_rate_type).should be_a_new(HeartRateType)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested heart_rate_type as @heart_rate_type" do
  #     heart_rate_type = HeartRateType.create! valid_attributes
  #     get :edit, :id => heart_rate_type.id.to_s
  #     assigns(:heart_rate_type).should eq(heart_rate_type)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new HeartRateType" do
  #       expect {
  #         post :create, :heart_rate_type => valid_attributes
  #       }.to change(HeartRateType, :count).by(1)
  #     end

  #     it "assigns a newly created heart_rate_type as @heart_rate_type" do
  #       post :create, :heart_rate_type => valid_attributes
  #       assigns(:heart_rate_type).should be_a(HeartRateType)
  #       assigns(:heart_rate_type).should be_persisted
  #     end

  #     it "redirects to the created heart_rate_type" do
  #       post :create, :heart_rate_type => valid_attributes
  #       response.should redirect_to(HeartRateType.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved heart_rate_type as @heart_rate_type" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       HeartRateType.any_instance.stub(:save).and_return(false)
  #       post :create, :heart_rate_type => {}
  #       assigns(:heart_rate_type).should be_a_new(HeartRateType)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       HeartRateType.any_instance.stub(:save).and_return(false)
  #       post :create, :heart_rate_type => {}
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested heart_rate_type" do
  #       heart_rate_type = HeartRateType.create! valid_attributes
  #       # Assuming there are no other heart_rate_types in the database, this
  #       # specifies that the HeartRateType created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       HeartRateType.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
  #       put :update, :id => heart_rate_type.id, :heart_rate_type => {'these' => 'params'}
  #     end

  #     it "assigns the requested heart_rate_type as @heart_rate_type" do
  #       heart_rate_type = HeartRateType.create! valid_attributes
  #       put :update, :id => heart_rate_type.id, :heart_rate_type => valid_attributes
  #       assigns(:heart_rate_type).should eq(heart_rate_type)
  #     end

  #     it "redirects to the heart_rate_type" do
  #       heart_rate_type = HeartRateType.create! valid_attributes
  #       put :update, :id => heart_rate_type.id, :heart_rate_type => valid_attributes
  #       response.should redirect_to(heart_rate_type)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the heart_rate_type as @heart_rate_type" do
  #       heart_rate_type = HeartRateType.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       HeartRateType.any_instance.stub(:save).and_return(false)
  #       put :update, :id => heart_rate_type.id.to_s, :heart_rate_type => {}
  #       assigns(:heart_rate_type).should eq(heart_rate_type)
  #     end

  #     it "re-renders the 'edit' template" do
  #       heart_rate_type = HeartRateType.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       HeartRateType.any_instance.stub(:save).and_return(false)
  #       put :update, :id => heart_rate_type.id.to_s, :heart_rate_type => {}
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested heart_rate_type" do
  #     heart_rate_type = HeartRateType.create! valid_attributes
  #     expect {
  #       delete :destroy, :id => heart_rate_type.id.to_s
  #     }.to change(HeartRateType, :count).by(-1)
  #   end

  #   it "redirects to the heart_rate_types list" do
  #     heart_rate_type = HeartRateType.create! valid_attributes
  #     delete :destroy, :id => heart_rate_type.id.to_s
  #     response.should redirect_to(heart_rate_types_url)
  #   end
  # end

end
